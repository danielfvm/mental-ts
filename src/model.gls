begin vertex;
#version 130
uniform float pos[3 * 4 * 6];
uniform float modelView[4 * 4];

attribute vec4 color;
attribute vec2 position;

flat out int offset;

void main()
{
    offset = int(round(gl_Color.r * 255.0));
    
    vec3 vertex = vec3(
        pos[gl_VertexID * 3 + 0 + offset * 12], 
        pos[gl_VertexID * 3 + 1 + offset * 12], 
        pos[gl_VertexID * 3 + 2 + offset * 12]
    );
    mat4 modelViewMatrix = mat4(
        vec4(modelView[0], modelView[1], modelView[2], modelView[3]),
        vec4(modelView[4], modelView[5], modelView[6], modelView[7]),
        vec4(modelView[8], modelView[9], modelView[10], modelView[11]),
        vec4(modelView[12], modelView[13], modelView[14], modelView[15])
    );

    vec2 texcoord[] = vec2[](
        vec2(0.0, 0.0),
        vec2(0.0, 1.0),
        vec2(1.0, 0.0),
        vec2(1.0, 1.0)
    );

    int texpos = gl_VertexID;
    gl_Position = modelViewMatrix * vec4(vertex, 1.0);
    gl_TexCoord[0] = vec4(texcoord[texpos % 4], 0.0, 0.0);
}

begin fragment;
#version 130
uniform sampler2D texture;
uniform float time;
uniform float width;
uniform float height;
uniform float scale;

flat in int offset;

void main()
{
    int texoffset = 1;
    if (offset == 4) texoffset = 0;
    if (offset == 5) texoffset = 2;

    vec4 pixel = texture2D(texture, gl_TexCoord[0].xy * vec2(1.0 / 4.0, 1.0) + vec2(1.0 / 4.0 * texoffset, 0.0));
    gl_FragColor = pixel;
}
